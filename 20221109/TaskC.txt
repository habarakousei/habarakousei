#includ<stdio.h>
#includ<stdlib.h>

int getRandomNumber(int min, int max){
    return rand() % (max - min + 1) + min;
}
int main(void){
    unsigned int now = (unsigned int)time(NULL);
    srand(now);
    for( int i = 0; i < 100; ++i ){
        printf( "%d\n", getRandomNumber(0, 100) );
    }
    return 0;

    void swap(int data[], int a, int b){
  int temp;
  temp = data[a];
  data[a] = data[b];
  data[b] = temp;
}

void quick_sort(int data[], int left, int right){
  int pivot, l, r;
  pivot = data[right];
  l = left;
  r = right;
  while(l != r){
    while(data[l] < pivot){
      l = l + 1;
    }
    while(l < r && data[r-1] >= pivot){
      r = r - 1;
    }
    if(l < r){
      swap(data, l, r-1);
    }
    swap(data, l, right);
    if(l-1 > left){
      quick_sort(data, left, l-1);
    }
    if(r+1 < right){
      quick_sort(data, r+1, right);
    }
}

int main(void){

  int data[] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
  int n, i, j, step, temp;

  printf("---shell sort---\nBefore : ");
  for(n=0; data[n]!='\0'; n++){
    printf("%d ",data[n]);
  }

  quick_sort(data, 0, n-1);

  printf("\nAfter  : ");
  for(n=0; data[n]!='\0'; n++){
    printf("%d ",data[n]);
  }

  return 0;

   int left = 0;
   int right = MAX - 1;

     while(left + 1 != right){
        middle = (left + right) / 2;
        if(arr[middle] == target){
            return middle + 1;
        }else if(target < arr[middle]){
            right = middle;
        }else{
            left = middle;
        }
    }
     if(arr[left] == target){
        return left +1;
    }else if(arr[right] == target){
        return right + 1;
    }
    return -1;
}